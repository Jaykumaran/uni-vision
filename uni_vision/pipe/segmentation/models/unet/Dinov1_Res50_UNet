import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision.ops import Conv2dNormActivation

class DecoderBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(DecoderBlock, self).__init__()
        self.conv1 = Conv2dNormActivation(in_channels, out_channels, kernel_size=3, padding=1)
        self.conv2 = Conv2dNormActivation(in_channels, out_channels, kernel_size=3, padding=1)
        self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        
    def forward(self, x, skip):
        # Upsample
        x = self.up(x)
        
        # Resize
        if x.size() != skip.size():
            skip = F.interpolate(skip, size = x.shape[2:], mode='bilinear', align_corners=True)
        
        # Concatenate skip connection with encoder output
        x = torch.cat([x, skip], dim = 1)
        
        x = self.conv1(x)
        x = self.conv2(x)
        return x
            

class UNetDiNOResNet50(nn.Module):
    def __init__(self, num_classes: int = None, pretrained = True):
        super(UNetDiNOResNet50, self).__init__()
        
        # Load DiNO V1 ResNet50 weights
        self.encoder = torch.hub.load("facebookresearch/dino:main", "dino_resnet50")
        
        # Encoder layers
        self.encoder_layers = [
            nn.Sequential(self.encoder.conv1, self.encoder.bn1, self.encoder.relu, self.encoder.max_pool),
            self.encoder.layer1, # (256, H/4, W/4)
            self.encoder.layer2, # (512, H/8, W/8)
            self.encoder.layer3, # (1024, H/16, W/16)
            self.encoder.layer4  # (2048, H/32, W/32)
        ]
        
        # Decoder
        self.decoder4 = DecoderBlock(2048 + 1024, 512) # layer 4 + layer 3
        self.decoder3 = DecoderBlock(512 + 512, 256)  # layer 3 + layer 2
        self.decoder2 = DecoderBlock(256 + 256, 128) # layer 2 + layer 1
        self.decoder1 = DecoderBlock(128 + 64, 64)
        
        # Seg Head
        self.segmentation_head = nn.Sequential(
            nn.Conv2d(64, num_classes, kernel_size=3, padding=1)
        )
        
        
    def forward(self, x):
        
        # Input resolution for final upsampling
        
        original_res = x.shape[:2] # H, W
        
        # DiNO Encoder Forward Pass
        x0 = self.encoder_layers[0](x)  # initial conv block
        x1 = self.encoder_layers[1](x0) # skip connection: layer 1
        x2 = self.encoder_layers[2](x1) # skip connection: layer 2
        x3 = self.encoder_layers[3](x2) # skip connection: layer 3
        x4 = self.encoder_layers[4](x3) # skip connection: layer 4
        
        
        # Decoder Forward Pass
        x = self.decoder4(x4, x3) # layer 4 + skip 3
        x = self.decoder3(x, x2)  # layer 3 + skip 2
        x = self.decoder2(x, x1)  # layer 2 + skip 1
        x = self.decoder1(x, x0)  # layer 1 + initial conv block
        
        # Upsample for final output to match input res
        x = F.interpolate(x, size = original_res, mode='bilinear', align_corners=True)
        
        x = self.segmentation_head(x)
        
        return x
        
                
        